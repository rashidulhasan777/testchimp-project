// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  RECRUITER
  HIRING_MANAGER
}

model User {
  // id String @id @default(auto()) @map("_id") @db.ObjectId
  id          String       @id @default(uuid())
  name        String
  email       String       @unique
  password    String
  description String?
  image       String?
  companyLogo String?
  comapanyName String?
  country     String?
  tests       Test[]
  createdAt   DateTime     @default(now())
  role        Role         @default(ADMIN)
  assessments Assessment[]
  candidates  Candidate[]
}

model Test {
  // id String @id @default(auto()) @map("_id") @db.ObjectId
  id               String       @id @default(uuid())
  title            String
  shortDescription String
  description      String
  time             Int
  level            String
  skills           String[]
  relevantRoles    String[]
  creator          User         @relation(fields: [creatorId], references: [id])
  // creatorId String @db.ObjectId
  creatorId        String
  createdAt        DateTime     @default(now())
  questions        Question[]
  assessments      Assessment[]
}

model Question {
  // id String @id @default(auto()) @map("_id") @db.ObjectId
  id            String   @id @default(uuid())
  title         String
  answers       String[]
  correctAnswer String
  test          Test     @relation(fields: [testId], references: [id])
  // testId String @db.ObjectId
  testId        String
  createdAt     DateTime @default(now())
  givenAnswers  Answer[]
}

model Assessment {
  // id String @id @default(auto()) @map("_id") @db.ObjectId
  id         String      @id @default(uuid())
  tests      Test[]
  user       User        @relation(fields: [userId], references: [id])
  // userId String @db.ObjectId
  userId     String
  answers    String[]
  createdAt  DateTime    @default(now())
  candidates Candidate[]
}

model Candidate {
  // id String @id @default(auto()) @map("_id") @db.ObjectId
  id                  String     @id @default(uuid())
  name                String
  email               String
  phone               String
  belongsTo           User       @relation(fields: [belongsToId], references: [id])
  // belongsToId String @db.ObjectId
  belongsToId         String
  assignedAssesment   Assessment @relation(fields: [assignedAssesmentId], references: [id])
  // assignedAssesmentId String @db.ObjectId
  assignedAssesmentId String
  createdAt           DateTime   @default(now())
  answers             Answer[]
}

model Answer {
  // id String @id @default(auto()) @map("_id") @db.ObjectId
  id          String    @id @default(uuid())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  // candidateId String @db.ObjectId
  candidateId String
  givenAnswer String
  question    Question  @relation(fields: [questionId], references: [id])
  // questionId String @db.ObjectId
  questionId  String

  createdAt DateTime @default(now())
}
